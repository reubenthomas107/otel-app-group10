name: Build OpenTelemetry Demo App Environment on AWS and Deploy to EKS Cluster

on:
  push:
    branches:
      - 'deploy/**'
      - 'feat/k8s'
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  CI_RUNNER_ROLE: ${{ secrets.CI_RUNNER_ROLE }}


jobs:
  # check-prerequisites:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Check/Install Prerequisites"
  #       run: |
  #         echo "Checking all the runtime prerequisites" 
  #         aws --version
  #       continue-on-error: false

  build_aws:
    runs-on: ubuntu-latest
    # needs: check-prerequisites
    outputs:
      k8s_mgmt_ip: ${{ steps.tf_outputs.outputs.k8s_mgmt_ip }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4.2.2

      - name: "Set up AWS CLI"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.11.2
          terraform_wrapper: false

      # - name: "Check Prerequisite Commands"
      #   run: |
      #     aws sts get-caller-identity
      #     terraform --version
      #   continue-on-error: false

      - name: "Initialize Terraform and Create Deployment Plan"
        run: |
          terraform init
          terraform validate
          terraform plan -out=otel.plan 

      - name: "Apply Terraform Plan"
        run: |
          terraform apply -auto-approve otel.plan
        continue-on-error: false

      - name: "Save Terraform Outputs"
        id: tf_outputs
        run: |
          echo "k8s_mgmt_ip=$(terraform output -json | jq -r .k8s_management_instance_public_ip.value)" >> $GITHUB_OUTPUT

      - name: "Test Variables"
        run: |
          echo "k8s_ec2_instance_ip is ${{ env.k8s_mgmt_ip }}"

  build_eks_cluster:
    runs-on: ubuntu-latest
    needs: build_aws
    env:
      k8s_mgmt_ip: ${{ needs.build_aws.outputs.k8s_mgmt_ip }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4.2.2

      - name: "Deploy EKS Cluster and Setup Add-ons (Remote SSH)"
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.k8s_mgmt_ip }}
          username: ec2-user
          key: ${{ secrets.K8S_EC2_SSH_PRIVATE_KEY }}
          script: |
            /home/ec2-user/eks_cluster/setup_cluster.sh
            /home/ec2-user/eks_cluster/setup_addons.sh

  build_containers:
    runs-on: ubuntu-latest
    needs: build_aws
    env:
      k8s_mgmt_ip: ${{ needs.build_aws.outputs.k8s_mgmt_ip }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4.2.2

      - name: "Build and Push Container Images to ECR Registry"
        run: | 
          echo "This step is for building and pushing container images to ECR Registry"

      - name: "Test Variables"
        run: |
          echo "k8s_ec2_instance_ip is ${{ env.k8s_mgmt_ip }}"

  deploy_oteldemo_helm:
    runs-on: ubuntu-latest
    needs: [build_eks_cluster, build_containers]
    env:
      k8s_mgmt_ip: ${{ needs.build_aws.outputs.k8s_mgmt_ip }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4.2.2

      - name: "Deploy Helm Chart for OpenTelemetry-Demo App (Remote SSH)"
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.k8s_mgmt_ip }}
          username: ec2-user
          key: ${{ secrets.K8S_EC2_SSH_PRIVATE_KEY }}
          script: |
            /home/ec2-user/helm/deploy_helm.sh
            echo "Deployed Helm Chart Successfully"
